// VERSION BSH/2 (do not remove this)
/* 
  BeanShell workflow script for Chipster v1.4.2 (build 831)
  Generated by ekorpela at Fri Mar 19 10:41:44 EET 2010
*/

import fi.csc.microarray.client.workflow.api.*;

data0 = app.getSelectionManager().getSelectedDataBean();

datas = new WfDataBean[] {
  data0
};
op = new WfOperation(app.locateOperationDefinition("Statistics", "PCA"), datas);
op.setParameter("do.pca.on", "chips");
op.setParameter("explained.variation", 80);
op.setParameter("scaling", "no");
op.setParameter("centering", "yes");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data1 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data0
};
op = new WfOperation(app.locateOperationDefinition("Visualisation", "Dendrogram"), datas);
op.setParameter("cluster", "chips");
op.setParameter("column", "group");
op.setParameter("number.of.groups", 2);
op.setParameter("image.width", 600);
op.setParameter("image.height", 600);
opBlocker = new WfResultBlocker(2);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data2 = opBlocker.getWorkflowResults().get(0);
data3 = opBlocker.getWorkflowResults().get(1);

datas = new WfDataBean[] {
  data0
};
op = new WfOperation(app.locateOperationDefinition("Statistics", "NMDS"), datas);
op.setParameter("image.width", 600);
op.setParameter("image.height", 600);
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data4 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data0
};
op = new WfOperation(app.locateOperationDefinition("Preprocessing", "Filter by CV"), datas);
op.setParameter("percentage.to.filter.out", 0.5);
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data5 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data5
};
op = new WfOperation(app.locateOperationDefinition("Statistics", "Two groups tests"), datas);
op.setParameter("column", "group");
op.setParameter("test", "empiricalBayes");
op.setParameter("p.value.adjustment.method", "BH");
op.setParameter("p.value.threshold", 0.01);
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data6 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data6
};
op = new WfOperation(app.locateOperationDefinition("Preprocessing", "Filter using a column value"), datas);
op.setParameter("column", "FC");
op.setParameter("cutoff", 1.0);
op.setParameter("smaller.or.larger", "outside");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data7 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data6
};
op = new WfOperation(app.locateOperationDefinition("Clustering", "Hierarchical"), datas);
op.setParameter("cluster", "genes");
op.setParameter("distance.method", "pearson");
op.setParameter("tree.method", "average");
op.setParameter("resampling", "none");
op.setParameter("number.of.replicates", 1000);
op.setParameter("image.width", 600);
op.setParameter("image.height", 600);
opBlocker = new WfResultBlocker(2);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data8 = opBlocker.getWorkflowResults().get(0);
data9 = opBlocker.getWorkflowResults().get(1);

datas = new WfDataBean[] {
  data6
};
op = new WfOperation(app.locateOperationDefinition("Pathways", "KEGG enrichment for miRNA targets"), datas);
op.setParameter("p.value.threshold", 0.05);
op.setParameter("p.adjust.method", "BH");
op.setParameter("minimum.population", 10);
op.setParameter("species", "human");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data10 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data7
};
op = new WfOperation(app.locateOperationDefinition("Annotation", "Find miRNA targets"), datas);
op.setParameter("species", "human");
op.setParameter("database", "miranda");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data11 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data7
};
op = new WfOperation(app.locateOperationDefinition("Annotation", "Find miRNA targets"), datas);
op.setParameter("species", "human");
op.setParameter("database", "mirtarget2");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data12 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data7
};
op = new WfOperation(app.locateOperationDefinition("Annotation", "Find miRNA targets"), datas);
op.setParameter("species", "human");
op.setParameter("database", "pictar");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data13 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data7
};
op = new WfOperation(app.locateOperationDefinition("Annotation", "Find miRNA targets"), datas);
op.setParameter("species", "human");
op.setParameter("database", "targetscan");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data14 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data7
};
op = new WfOperation(app.locateOperationDefinition("Annotation", "Find miRNA targets"), datas);
op.setParameter("species", "human");
op.setParameter("database", "mirbase");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data15 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data7
};
op = new WfOperation(app.locateOperationDefinition("Annotation", "miRNA annotations"), datas);
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data16 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data7
};
op = new WfOperation(app.locateOperationDefinition("Annotation", "Find miRNA targets"), datas);
op.setParameter("species", "human");
op.setParameter("database", "tarbase");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data17 = opBlocker.getWorkflowResults().get(0);
