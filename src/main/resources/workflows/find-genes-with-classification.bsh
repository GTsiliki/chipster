// VERSION BSH/2 (do not remove this)
/* 
  BeanShell workflow script for Chipster v1.2.4 (build 592)
  Generated by Jarno Tuimala at Fri Jul 10 15:46:35 EEST 2009
*/

import fi.csc.microarray.client.workflow.api.*;

data0 = app.getSelectionManager().getSelectedDataBean();

datas = new WfDataBean[] {
  data0
};
op = new WfOperation(app.locateOperationDefinition("Preprocessing", "Filter by standard deviation"), datas);
op.setParameter("percentage.to.filter.out", 0.95);
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data1 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data1
};
op = new WfOperation(app.locateOperationDefinition("Clustering", "Classification"), datas);
op.setParameter("method", "knn");
op.setParameter("standardize", "yes");
op.setParameter("validation.type", "crossvalidate");
op.setParameter("crossvalidation.type", "LOO");
op.setParameter("feature.selection.in.crossvalidation", "yes");
op.setParameter("feature.selection.threshold", 0.75);
op.setParameter("group.column", "group");
op.setParameter("training.column", "EMPTY");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data2 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data1
};
op = new WfOperation(app.locateOperationDefinition("Clustering", "Classification"), datas);
op.setParameter("method", "rpart");
op.setParameter("standardize", "yes");
op.setParameter("validation.type", "crossvalidate");
op.setParameter("crossvalidation.type", "LOO");
op.setParameter("feature.selection.in.crossvalidation", "yes");
op.setParameter("feature.selection.threshold", 0.75);
op.setParameter("group.column", "group");
op.setParameter("training.column", "EMPTY");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data3 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data1
};
op = new WfOperation(app.locateOperationDefinition("Clustering", "Classification"), datas);
op.setParameter("method", "lda");
op.setParameter("standardize", "yes");
op.setParameter("validation.type", "crossvalidate");
op.setParameter("crossvalidation.type", "LOO");
op.setParameter("feature.selection.in.crossvalidation", "yes");
op.setParameter("feature.selection.threshold", 0.75);
op.setParameter("group.column", "group");
op.setParameter("training.column", "EMPTY");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data4 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data1
};
op = new WfOperation(app.locateOperationDefinition("Clustering", "Classification"), datas);
op.setParameter("method", "naiveBayes");
op.setParameter("standardize", "yes");
op.setParameter("validation.type", "crossvalidate");
op.setParameter("crossvalidation.type", "LOO");
op.setParameter("feature.selection.in.crossvalidation", "yes");
op.setParameter("feature.selection.threshold", 0.75);
op.setParameter("group.column", "group");
op.setParameter("training.column", "EMPTY");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data5 = opBlocker.getWorkflowResults().get(0);

datas = new WfDataBean[] {
  data1
};
op = new WfOperation(app.locateOperationDefinition("Clustering", "Classification"), datas);
op.setParameter("method", "svm");
op.setParameter("standardize", "yes");
op.setParameter("validation.type", "crossvalidate");
op.setParameter("crossvalidation.type", "LOO");
op.setParameter("feature.selection.in.crossvalidation", "yes");
op.setParameter("feature.selection.threshold", 0.75);
op.setParameter("group.column", "group");
op.setParameter("training.column", "EMPTY");
opBlocker = new WfResultBlocker(1);
op.setResultListener(opBlocker);
app.executeOperation(op);
opBlocker.blockUntilDone();
data6 = opBlocker.getWorkflowResults().get(0);
